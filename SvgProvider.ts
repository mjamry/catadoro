import { SkPath, SkSVG, Skia, useSVG } from "@shopify/react-native-skia";


export type FaceType = 'face_sad' | 'face_normal' | 'face_angry' | 'face_happy';
export type PatchType = 'patch_1' | 'patch_2' | 'patch_3' | 'patch_4';
export type SvgIconType = 'clock' | 'settings' | 'plus' | 'minus' | 'play' | 'pause';
export type SvgType = FaceType | PatchType | 'cat_head';
export type SvgPathType = 'cat_head_outline';

interface ISvgProvider {
  getSvg: (type: SvgType, color?: string) => SkSVG;
  getPath: (type: SvgPathType) => SkPath;
  getIcon: (type: SvgIconType) => SkSVG;
}

const useSvgProvider = (): ISvgProvider => {
  const getSvg = (type: SvgType, color?: string) => {
    const fillColor = color ?? 'white';
    switch(type) {
      //FACES
      case 'face_sad':
        return useSVG(require("./assets/faces/face_sad.svg"))!;
      case 'face_normal':
        return useSVG(require("./assets/faces/face_normal.svg"))!;
      case 'face_angry':
        return useSVG(require("./assets/faces/face_angry.svg"))!;
      case 'face_happy':
        return useSVG(require("./assets/faces/face_happy.svg"))!;
      //PATCHES
      case 'patch_1':
        return Skia.SVG.MakeFromString(
          `<svg width="36" height="40" viewBox="0 0 36 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
              <path d="M0.738,21.282C0.624,21.069 0.598,20.685 0.644,20.506C0.8,19.897 1.13,19.463 1.303,18.859C2.046,16.263 3.343,13.704 5.631,12.079C7.907,10.462 10.294,8.636 12.991,7.75C16.802,6.497 21.284,7.134 24.823,8.815C26.368,9.548 27.254,10.51 28.569,11.517C28.953,11.81 29.499,12.305 29.884,12.59C30.301,12.898 30.851,13.458 31.232,13.812C31.846,14.382 32.341,14.791 32.847,15.469C33.523,16.376 33.926,17.773 34.038,18.9C34.349,22.022 31.621,24.565 28.643,24.952C27.307,25.125 25.684,24.661 24.537,23.976C22.723,22.893 22.557,20.47 21.324,18.914C20.575,17.968 18.421,17.79 17.265,17.89C15.12,18.075 14.68,20.46 13.281,21.8C11.343,23.656 9.583,24.967 6.87,25.284C6.072,25.377 5.035,25.461 4.278,25.114C3.031,24.542 1.364,22.446 0.738,21.282Z" style="fill:${fillColor};"/>
          </svg>`)!;
      case 'patch_2':
        return Skia.SVG.MakeFromString(
          `<svg width="36" height="40" viewBox="0 0 36 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
              <g id="patch_2">
                  <path d="M34.46,26.586C32.403,26.382 29.13,25.692 27.097,25.306C25.999,25.098 24.815,25.001 23.808,24.48C22.366,23.734 21.411,22.148 21.815,20.514C22.021,19.676 22.516,18.886 23.077,18.241C24.109,17.054 25.788,16.507 27.246,16.071C28.199,15.786 29.142,15.5 30.135,15.389C30.931,15.3 32.221,15.105 32.835,15.789C34.547,17.697 34.544,20.525 34.753,22.919C34.834,23.848 34.859,24.765 34.713,25.691C34.675,25.93 34.629,26.164 34.554,26.394C34.548,26.413 34.491,26.612 34.46,26.586Z" style="fill:${fillColor};"/>
                  <path d="M0.632,24.68C0.621,24.679 0.607,24.274 0.605,24.248C0.573,23.796 0.537,23.343 0.518,22.89C0.429,20.814 0.997,19.064 1.756,17.163C2.248,15.929 3.2,14.897 4.072,13.921C4.9,12.996 5.744,12.09 6.724,11.32C7.8,10.475 9.001,9.791 10.155,9.06C11.012,8.517 11.842,8.102 12.775,7.698C13.18,7.523 13.612,7.267 14.049,7.178C14.426,7.102 14.636,7.404 14.835,7.684C15.325,8.373 15.803,9.103 16.208,9.845C16.719,10.782 17.168,11.798 17.288,12.869C17.441,14.244 16.971,15.661 16.607,16.965C16.293,18.087 16.012,19.198 15.347,20.178C14.579,21.31 13.549,22.566 12.402,23.332C10.642,24.508 8.293,24.796 6.224,24.768C5.062,24.752 3.718,24.76 2.556,24.761C1.797,24.762 1.267,24.702 0.632,24.68Z" style="fill:${fillColor};"/>
              </g>
          </svg>`)!;
      case 'patch_3':
          return Skia.SVG.MakeFromString(
            `<svg width="36" height="40" viewBox="0 0 36 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
                <g id="patch3">
                    <path d="M13.679,7.605C13.816,7.479 14.032,7.261 14.206,7.185C14.649,6.992 15.254,7.059 15.729,7.041C16.273,7.021 16.813,6.947 17.358,6.96C17.915,6.974 18.474,6.941 19.031,6.982C19.548,7.02 20.068,6.973 20.583,6.995C21.1,7.017 21.812,7.178 22.213,7.564C22.45,7.792 22.569,8.261 22.679,8.559C22.952,9.298 23.237,10.074 23.432,10.837C23.609,11.529 23.764,12.24 23.688,12.946C23.654,13.266 23.449,13.632 23.267,13.907C22.937,14.406 22.278,14.345 21.835,14.016C21.504,13.77 21.25,13.327 21.079,12.963C20.521,11.769 20.459,10.43 20.526,9.137C20.549,8.694 20.491,8.271 20.457,7.831C20.447,7.703 20.467,7.459 20.346,7.372C20.142,7.226 19.797,7.319 19.573,7.364C19.503,7.378 19.55,7.721 19.553,7.768C19.579,8.217 19.595,8.667 19.602,9.117C19.613,9.884 19.593,10.651 19.581,11.419C19.569,12.131 19.72,13.404 19.404,14.059C19.216,14.447 18.775,14.504 18.271,14.523C17.542,14.551 17.41,13.547 17.286,13.027C17.068,12.107 17.009,11.096 17.032,10.153C17.046,9.602 16.973,9.015 16.952,8.464C16.941,8.146 17.057,7.612 16.68,7.507C16.517,7.462 16.33,7.502 16.163,7.505C16.035,7.507 15.851,7.476 15.73,7.529C15.635,7.57 15.646,7.828 15.638,7.911C15.599,8.322 15.557,8.73 15.511,9.14C15.431,9.848 15.411,10.579 15.272,11.278C15.194,11.674 15.035,12.048 14.924,12.434C14.822,12.791 14.751,13.145 14.592,13.483C14.411,13.867 14.105,14.622 13.558,14.554C12.973,14.482 12.762,14.028 12.712,13.558C12.659,13.056 12.741,12.309 12.791,11.805C12.862,11.092 13.06,10.401 13.168,9.694C13.254,9.132 13.372,8.572 13.449,8.01C13.465,7.892 13.477,7.748 13.567,7.661C13.579,7.649 13.66,7.582 13.679,7.605Z" style="fill:${fillColor};"/>
                </g>
            </svg>`)!;
      case 'patch_4':
        return Skia.SVG.MakeFromString(
          `<svg width="36" height="40" viewBox="0 0 36 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
              <g id="patch4">
                  <path d="M12.328,12.231C12.324,12.231 12.32,12.232 12.315,12.232C12.336,12.234 12.338,12.234 12.328,12.231C14.786,12.126 16.384,13.62 17.213,14.044C17.623,14.254 18.051,14.513 18.351,14.87C19.575,16.331 18.726,18.252 17.551,19.43C15.089,21.899 11.288,22.695 7.983,23.268C6.418,23.539 3.963,24.107 2.661,22.866C1.922,22.16 1.908,21.06 1.935,20.108C2.023,17.028 4.253,14.93 6.863,13.62C8.001,13.049 9.238,12.683 10.481,12.421C10.899,12.333 11.327,12.246 11.754,12.218C11.884,12.209 12.013,12.202 12.144,12.201C12.171,12.201 12.299,12.224 12.328,12.231Z" style="fill:${fillColor};"/>
              </g>
          </svg>`)!;
      case 'cat_head':
      default:
        return Skia.SVG.MakeFromString(
          `<svg width="36" height="40" viewBox="0 0 36 40" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
              <g transform="matrix(1,0,0,1,-550.718,-522.942)">
                  <g transform="matrix(1.25718,0,0,1.25718,-141.632,-134.489)">
                      <path d="M552.115,544.89C552.036,544.597 551.754,543.603 551.702,543.334C551.665,543.032 551.515,541.946 551.502,541.643C551.523,540.983 551.597,539.478 551.733,538.816C552.185,536.612 553.142,535.221 553.151,535.208C553.213,535.119 553.236,535.01 553.214,534.904C551.786,527.876 552.45,524.71 552.733,523.802C558.176,525.277 561.126,529.112 561.156,529.152C561.258,529.287 561.436,529.342 561.597,529.286C562.47,528.986 563.594,528.967 564.187,528.982C564.606,528.993 565.03,528.993 565.449,528.982C566.042,528.967 567.167,528.986 568.039,529.286C568.2,529.342 568.378,529.287 568.48,529.152C568.51,529.112 571.447,525.279 576.903,523.802C577.187,524.714 577.85,527.881 576.422,534.904C576.4,535.009 576.423,535.119 576.485,535.207C576.494,535.221 577.451,536.612 577.903,538.816C578.04,539.478 578.113,540.983 578.134,541.643C578.121,541.946 577.971,543.032 577.934,543.334C577.881,543.608 577.591,544.632 577.517,544.904C577.222,545.777 576.824,546.644 576.322,547.5C576.319,547.506 576.315,547.513 576.312,547.519C576.303,547.535 575.442,549.184 573.664,550.795C571.298,552.941 568.516,554.01 565.392,553.974C565.202,553.972 565.01,553.971 564.818,553.971C564.627,553.971 564.435,553.972 564.244,553.974C561.122,554.009 558.338,552.941 555.972,550.795C554.195,549.184 553.333,547.535 553.325,547.519C553.321,547.513 553.318,547.506 553.314,547.5C552.812,546.644 552.414,545.777 552.119,544.904L552.115,544.89Z" style="fill:${fillColor};"/>
                  </g>
                  <g id="main" transform="matrix(1.25718,0,0,1.25718,-141.632,-134.489)">
                      <path d="M550.915,543.334C550.867,542.916 550.725,541.727 550.718,541.34C550.753,540.643 550.857,539.175 550.972,538.621C551.38,536.663 552.145,535.329 552.414,534.902C550.66,526.159 552.08,523.273 552.142,523.154C552.225,522.993 552.409,522.91 552.585,522.954C557.815,524.25 560.865,527.569 561.608,528.462C562.49,528.213 563.492,528.179 564.208,528.198C564.613,528.209 565.024,528.209 565.429,528.198C566.144,528.179 567.147,528.213 568.028,528.462C568.771,527.569 571.821,524.25 577.051,522.954C577.228,522.91 577.411,522.993 577.494,523.154C577.556,523.273 578.976,526.159 577.222,534.902C577.491,535.329 578.256,536.663 578.664,538.621C578.78,539.175 578.87,539.807 578.905,540.504L578.915,541.131L578.915,541.324L578.915,541.131L578.918,541.34C578.911,541.727 578.769,542.916 578.721,543.334C578.659,543.677 578.356,544.779 578.26,545.137C577.966,546.021 577.557,546.942 577.004,547.888C576.92,548.049 576.033,549.7 574.214,551.356C572.502,552.915 569.614,554.759 565.539,554.759C565.487,554.759 565.435,554.759 565.383,554.758C565.008,554.754 564.628,554.754 564.254,554.758C560.095,554.807 557.156,552.935 555.423,551.356C553.603,549.7 552.716,548.049 552.632,547.888C552.079,546.942 551.671,546.021 551.376,545.137C551.28,544.779 550.977,543.677 550.915,543.334ZM578.134,541.643C578.113,540.983 578.04,539.478 577.903,538.816C577.451,536.612 576.494,535.221 576.485,535.207C576.423,535.119 576.4,535.009 576.422,534.904C577.85,527.881 577.187,524.714 576.903,523.802C571.447,525.279 568.51,529.112 568.48,529.152C568.378,529.287 568.2,529.342 568.039,529.286C567.167,528.986 566.042,528.967 565.449,528.982C565.03,528.993 564.606,528.993 564.187,528.982C563.594,528.967 562.47,528.986 561.597,529.286C561.436,529.342 561.258,529.287 561.156,529.152C561.126,529.112 558.176,525.277 552.733,523.802C552.45,524.71 551.786,527.876 553.214,534.904C553.236,535.01 553.213,535.119 553.151,535.208C553.142,535.221 552.185,536.612 551.733,538.816C551.597,539.478 551.523,540.983 551.502,541.643C551.515,541.946 551.665,543.032 551.702,543.334C551.754,543.603 552.036,544.597 552.115,544.89C552.111,544.888 552.107,544.887 552.103,544.885C552.107,544.887 552.111,544.888 552.115,544.89C552.116,544.895 552.118,544.9 552.119,544.904C552.414,545.777 552.812,546.644 553.314,547.5C553.318,547.506 553.321,547.513 553.325,547.519C553.333,547.535 554.195,549.184 555.972,550.795C558.338,552.941 561.122,554.009 564.244,553.974C564.435,553.972 564.627,553.971 564.818,553.971C565.01,553.971 565.202,553.972 565.392,553.974C568.516,554.01 571.298,552.941 573.664,550.795C575.442,549.184 576.303,547.535 576.312,547.519C576.315,547.513 576.319,547.506 576.322,547.5C576.824,546.644 577.222,545.777 577.517,544.904C577.591,544.632 577.881,543.608 577.934,543.334C577.971,543.032 578.121,541.946 578.134,541.643Z" style="fill:${fillColor};"/>
                  </g>
              </g>
          </svg>`
        )!;
    }
  };

  const getPath = (type: SvgPathType) => {
    switch(type){
      case 'cat_head_outline':
        const svg = "M578.134,541.643C578.113,540.983 578.04,539.478 577.903,538.816C577.451,536.612 576.494,535.221 576.485,535.207C576.423,535.119 576.4,535.009 576.422,534.904C577.85,527.881 577.187,524.714 576.903,523.802C571.447,525.279 568.51,529.112 568.48,529.152C568.378,529.287 568.2,529.342 568.039,529.286C567.167,528.986 566.042,528.967 565.449,528.982C565.03,528.993 564.606,528.993 564.187,528.982C563.594,528.967 562.47,528.986 561.597,529.286C561.436,529.342 561.258,529.287 561.156,529.152C561.126,529.112 558.176,525.277 552.733,523.802C552.45,524.71 551.786,527.876 553.214,534.904C553.236,535.01 553.213,535.119 553.151,535.208C553.142,535.221 552.185,536.612 551.733,538.816C551.597,539.478 551.523,540.983 551.502,541.643C551.515,541.946 551.665,543.032 551.702,543.334C551.754,543.603 552.036,544.597 552.115,544.89C552.111,544.888 552.107,544.887 552.103,544.885C552.107,544.887 552.111,544.888 552.115,544.89C552.116,544.895 552.118,544.9 552.119,544.904C552.414,545.777 552.812,546.644 553.314,547.5C553.318,547.506 553.321,547.513 553.325,547.519C553.333,547.535 554.195,549.184 555.972,550.795C558.338,552.941 561.122,554.009 564.244,553.974C564.435,553.972 564.627,553.971 564.818,553.971C565.01,553.971 565.202,553.972 565.392,553.974C568.516,554.01 571.298,552.941 573.664,550.795C575.442,549.184 576.303,547.535 576.312,547.519C576.315,547.513 576.319,547.506 576.322,547.5C576.824,546.644 577.222,545.777 577.517,544.904C577.591,544.632 577.881,543.608 577.934,543.334C577.971,543.032 578.121,541.946 578.134,541.643Z";
        return Skia.Path.MakeFromSVGString(svg)!;
      default:
        return Skia.Path.Make();
    }
  }

  const getIcon = (type: SvgIconType) => {
    switch(type) {
      case 'plus':
        return useSVG(require("./assets/icons/icon_add-circle.svg"))!;
      case 'minus':
        return useSVG(require("./assets/icons/icon_minus-circle.svg"))!;
      case 'settings':
        return useSVG(require("./assets/icons/icon_settings.svg"))!;
      case 'clock':
        return useSVG(require("./assets/icons/icon_clock-circle.svg"))!;
      case 'play':
        return useSVG(require("./assets/icons/icon_play.svg"))!;
      case 'pause':
        return useSVG(require("./assets/icons/icon_pause.svg"))!;
    }
  }

  return {
    getSvg,
    getPath,
    getIcon,
  };
};

export default useSvgProvider;
